<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="DetectCard" id="1" localization="8" tooltip="Detect card" x="201" y="348"><bitmap>media/images/box/loop.png</bitmap><script language="4"><content><![CDATA[
# you need to copy your aruco_def in an acessible path, if you need to add a new aeronef!
# eg:
# scp aruco_def.py nao@<ip>:/home/nao/.local/lib/python2.7/site-packages/

# import abcdk.aruco_def
import abcdk.aruco_global_tools
reload(abcdk.aruco_global_tools)

import aruco_def
reload(aruco_def)

import time
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mem = ALProxy("ALMemory")
        self.tts = ALProxy("ALTextToSpeech")

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );

        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;

        aru = ALProxy("DXAruco")

        rPeriod = self.getParameter( 'rPeriod' );
        while( not self.bMustStop ):
            try:
                retVal = aru.detect({"resolution": 1, "camera":0, "dictionary":abcdk.aruco_global_tools.getDictionaryType()})
                self.log("detect: %s" % str(retVal))
                for mark in retVal:
                    num = mark[0]
                    mark_name = abcdk.aruco_global_tools.getArucoMeaning(num, self.tts.getLanguage())
                    self.output_recognised(num)
                    self.output_name(mark_name)
                    self.mem.raiseMicroEvent("mark",num)
                    self.mem.raiseMicroEvent("mark_name",mark_name)
            except BaseException as err:
                if not "No markers" in str(err):
                    print("ERR: in loop: %s" % str(err) )
            time.sleep( rPeriod );
        # end while
        self.bIsRunning = False;
        self.onStopped();
        self.log( self.boxName + ": start - end" );

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution

# Template_White - end
pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="output_recognised" type="2" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Output name="output_name" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="0.2" default_value="1" min="0" max="100000" tooltip="period in seconds" id="7" /></Box><Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="637" y="394"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="FilterSameRecently" id="11" localization="8" tooltip="Filter data recently received&#x0A;&#x0A;v0.65: add a box parameter&#x0A;&#x0A;(this box was previously nammed FilterRecently)" x="423" y="350"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[# FilterSameRecently
# v0.65

import time
import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();
        self.dictRecentlySaid = dict(); # for each word, the hour of last pronociated

    def onLoad(self):
        if( self.getParameter("bResetAtEachLoad") ):
            self.dictRecentlySaid = dict(); # for each word, the hour of last pronociated


    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, oneThing ):
        while( self.mutex.testandset() == False ):
            print( "%s: locked, waiting" % self.getName() );
            time.sleep( 0.1 );

        if( not oneThing in self.dictRecentlySaid ):
            self.dictRecentlySaid[oneThing] = time.time() - 10000; # will be outputted now

        if( time.time() - self.dictRecentlySaid[oneThing] > self.getParameter( 'rTimeThreshold' ) ):
            self.dictRecentlySaid[oneThing] = time.time();
            self.onStopped(oneThing) #~ activate output of the box

        self.mutex.unlock();

    def onInput_onReset(self):
        while( self.mutex.testandset() == False ):
            print( "%s: locked, waiting" % self.getName() );

        self.dictRecentlySaid.clear();
        self.mutex.unlock();

# FilterSameRecently - end
pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="reset last so next data will pass even if it&apos;s the same than the previous one" id="3" /><Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="rTimeThreshold" inherits_from_parent="0" content_type="2" value="3" default_value="3" min="0" max="10000" tooltip="Threshold: time in seconds before new trigg is possible" id="5" /><Parameter name="bResetAtEachLoad" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="did you want this box to reset its timer at each new loading ? default: yes" id="6" /></Box><Box name="GameLoop" id="3" localization="8" tooltip="Our template for the boxes using a while loop in their start method.&#x0A;*** ref box in: ./4_localize/Templates/TemplateWhile/ExampleTemplateWhile.xar ***&#x0A;*** last modification date(git):   Thu Oct 15 16:26:21 2009 +0200 ***" x="168" y="641"><bitmap>media/images/box/loop.png</bitmap><script language="4"><content><![CDATA[# Template_White
# v1.0

import time
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );

        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;

        rPeriod = self.getParameter( 'rPeriod' );
        while( not self.bMustStop ):
            # insert some good and powerful code here
            time.sleep( rPeriod );
        # end while
        self.bIsRunning = False;
        self.onStopped();
        self.log( self.boxName + ": start - end" );

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution

# Template_White - end
pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="100000" tooltip="period in seconds" id="5" /></Box><Box name="CardGame" id="4" localization="8" tooltip="Template_StateMachine&#x0A;v0.9&#x0A;A small state machine, the most simple and efficient. Developped by the Applications and Usage Team At Aldebaran." x="372" y="210"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[# Template_StateMachine
# v0.9

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bRunning = False;

    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self):
        self.bRunning = True;
        self.gotoAndStop(1)

    def onInput_onStop(self):
        if( self.bRunning ):
            self.bRunning = False;
            self.onStopped();
        pass

# Template_StateMachine - end
pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onCard" type="3" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Timeline enable="1" fps="10" start_frame="1" end_frame="-1" size="-1"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="intro" index="1"><Diagram scale="88"><Box name="goto_question" id="4" localization="8" tooltip="gotoXxx - explicit&#x0A;Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. The frame name is the one directly for the box name, so that it prevents copy-paste error and it&apos;s more explicit&#x0A;v0.6: first version" x="560" y="196"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[import datetime
import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        strJumpDestination = self.boxName;
        strJumpDestination = strJumpDestination.replace( "goto_", "" );
        strJumpDestination = strJumpDestination.replace( "goto", "" );
        strHumanTime = datetime.datetime.now().strftime( "%Y_%m_%d-%Hh%Mm%Ss%fms" );
        self.log("[%s] %s: goto frame '%s'" % ( strHumanTime, time.time(), strJumpDestination ) );
        self.gotoAndStopParent( strJumpDestination );

    def onInput_onStop(self):
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" /></Box><Box name="abcdk_BodyTalk" id="13" localization="8" tooltip="The abcdk_bodytalk: start fast and lightweight.&#x0A;&#x0A;v0.96: optionnal no wait at end&#x0A;v0.95: handle obstacles and exclude joint&#x0A;v0.94: patching on every error case&#x0A;v0.93: onSay: add the global speech speed&#x0A;v0.92: onSay: add a pause before speaking&#x0A;v0.91b: add comments&#x0A;v0.91: add direct txt inputing&#x0A;v0.9: change initialisation&#x0A;v0.8: add a track face&#x0A;v0.7: add an option to disable head movement (so you can launch what you want on it)" x="378" y="205"><bitmap>media/images/box/interaction/say.png</bitmap><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[# abcdk_BodyTalk
# v0.96

try: import abcdk.bodytalk
except: pass # this error could occurs only on first execution, it's handled in the installer
try: import abcdk.naoqitools
except: pass
try: import abcdk.speech
except: pass

if( 1 ):
    import abcdk.bodytalk
    reload(abcdk.bodytalk)
    import abcdk.motiontools
    reload(abcdk.motiontools)
    reload(abcdk.speech)
    import abcdk.tracking
    reload(abcdk.tracking)
    import abcdk.leds
    reload(abcdk.leds)

import time
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        try:
            self.tts = ALProxy( "ALTextToSpeech" );
        except Exception, err:
            self.log( "ERR: tts seems not to be present, so we won't use it..." );
            self.tts = False;

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onPrepare(self):
        abcdk.bodytalk.bodyTalk.prepare( bUseHead = self.getParameter( 'bUseHead' ), rSide = self.getParameter( "rSide" ), rElevation = self.getParameter( "rElevation" ),
                    astrJointsToExclude = eval(self.getParameter( "astrJointsToExclude" )),
                    astrObstacles = eval(self.getParameter( "astrObstacles" )),
        );

    def startBodyTalk( self, nSayID ):
        self.log( self.boxName + ": start - begin" );

        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;

        abcdk.bodytalk.bodyTalk.start( bUseHead = self.getParameter( 'bUseHead' ), bTrackFace = self.getParameter( 'bTrackFace' ),
                nSayID = nSayID, astrJointsToExclude = eval(self.getParameter( "astrJointsToExclude" )), astrObstacles = eval(self.getParameter( "astrObstacles" )),
        );
        rPeriod = 0.5;
        while( not self.bMustStop ):
            bRet = abcdk.bodytalk.bodyTalk.update( rSide = self.getParameter( "rSide" ), rElevation = self.getParameter( "rElevation" ) );
            if( not bRet ):
                self.bMustStop = True;
            time.sleep( rPeriod );
        # end while
        abcdk.bodytalk.bodyTalk.stop(self.getParameter("bWaitEndOfRestMovement"));
        self.bIsRunning = False;
        self.onStopped();
        self.log( self.boxName + ": start - end" );


    def onInput_onStart(self):
        self.startBodyTalk( -1 );

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution

    def onInput_onSay( self, strTxt ):
        if( self.bIsRunning ):
            self.log( "Already running => nothing..." );
            return;
        nSayID = self.tts.post.say( "\\PAU=700\\ " + abcdk.speech.getTextWithCurrentSpeed( strTxt ) );
        self.startBodyTalk( nSayID );

# abcdk_BodyTalk - end
pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onPrepare" type="1" type_size="1" nature="1" inner="0" tooltip="If you know you will talk, you can prepare to have a starting more reactive." id="2" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the box behavior" id="3" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" /><Input name="onSay" type="3" type_size="1" nature="1" inner="0" tooltip="automatic say and animate imput: just send some text, and it will say them while talking, if the text is enough long..." id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /><Parameter name="bUseHead" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we send movements to the head ?" id="7" /><Parameter name="rElevation" inherits_from_parent="0" content_type="2" value="-0.25" default_value="0" min="-0.5" max="0.5" tooltip="" id="8" /><Parameter name="rSide" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="" id="9" /><Parameter name="bTrackFace" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Mario use face tracking to look at human" id="10" /><Parameter name="astrJointsToExclude" inherits_from_parent="0" content_type="3" value="[]" default_value='[&quot;RArm&quot;]' custom_choice="1" tooltip="a string to evaluate as an array: it&apos;s a list of obstacles" id="11"><Choice value="[]" /><Choice value='[&quot;RHand&quot;]' /><Choice value='[&quot;RArm&quot;]' /></Parameter><Parameter name="astrObstacles" inherits_from_parent="0" content_type="3" value="[]" default_value='[&quot;Table&quot;]' custom_choice="0" tooltip="a string to evaluate as an array: it&apos;s a list of obstacles" id="12"><Choice value="[]" /><Choice value='[&quot;Table&quot;]' /></Parameter><Parameter name="bWaitEndOfRestMovement" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="The box will wait for the rest movement to be finished. So when the stop is triggered, no movement is on the stack. (default)" id="13" /></Box><Box name="GetTextMultiLang" id="5" localization="8" tooltip="" x="258" y="132"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.onStopped(theGame.getTextMultiLang(self.getParameter("TextId"))) #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="TextId" inherits_from_parent="0" content_type="3" value="WELCOME" default_value="" custom_choice="0" tooltip="Text id of the localized string to retrieve" id="5" /></Box><Box name="InitGame" id="1" localization="8" tooltip="" x="243" y="577"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        theGame.reset(ALFrameManager.getBehaviorPath(self.behaviorId))
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="4" indexofinput="2" outputowner="13" indexofoutput="6" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="1" /><Link inputowner="13" indexofinput="5" outputowner="5" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="question" index="20"><Diagram scale="100"><Box name="abcdk_BodyTalk" id="13" localization="8" tooltip="The abcdk_bodytalk: start fast and lightweight.&#x0A;&#x0A;v0.96: optionnal no wait at end&#x0A;v0.95: handle obstacles and exclude joint&#x0A;v0.94: patching on every error case&#x0A;v0.93: onSay: add the global speech speed&#x0A;v0.92: onSay: add a pause before speaking&#x0A;v0.91b: add comments&#x0A;v0.91: add direct txt inputing&#x0A;v0.9: change initialisation&#x0A;v0.8: add a track face&#x0A;v0.7: add an option to disable head movement (so you can launch what you want on it)" x="500" y="169"><bitmap>media/images/box/interaction/say.png</bitmap><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[# abcdk_BodyTalk
# v0.96

try: import abcdk.bodytalk
except: pass # this error could occurs only on first execution, it's handled in the installer
try: import abcdk.naoqitools
except: pass
try: import abcdk.speech
except: pass

if( 1 ):
    import abcdk.bodytalk
    reload(abcdk.bodytalk)
    import abcdk.motiontools
    reload(abcdk.motiontools)
    reload(abcdk.speech)
    import abcdk.tracking
    reload(abcdk.tracking)
    import abcdk.leds
    reload(abcdk.leds)

import time
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        try:
            self.tts = ALProxy( "ALTextToSpeech" );
        except Exception, err:
            self.log( "ERR: tts seems not to be present, so we won't use it..." );
            self.tts = False;

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onPrepare(self):
        abcdk.bodytalk.bodyTalk.prepare( bUseHead = self.getParameter( 'bUseHead' ), rSide = self.getParameter( "rSide" ), rElevation = self.getParameter( "rElevation" ),
                    astrJointsToExclude = eval(self.getParameter( "astrJointsToExclude" )),
                    astrObstacles = eval(self.getParameter( "astrObstacles" )),
        );

    def startBodyTalk( self, nSayID ):
        self.log( self.boxName + ": start - begin" );

        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;

        abcdk.bodytalk.bodyTalk.start( bUseHead = self.getParameter( 'bUseHead' ), bTrackFace = self.getParameter( 'bTrackFace' ),
                nSayID = nSayID, astrJointsToExclude = eval(self.getParameter( "astrJointsToExclude" )), astrObstacles = eval(self.getParameter( "astrObstacles" )),
        );
        rPeriod = 0.5;
        while( not self.bMustStop ):
            bRet = abcdk.bodytalk.bodyTalk.update( rSide = self.getParameter( "rSide" ), rElevation = self.getParameter( "rElevation" ) );
            if( not bRet ):
                self.bMustStop = True;
            time.sleep( rPeriod );
        # end while
        abcdk.bodytalk.bodyTalk.stop(self.getParameter("bWaitEndOfRestMovement"));
        self.bIsRunning = False;
        self.onStopped();
        self.log( self.boxName + ": start - end" );


    def onInput_onStart(self):
        self.startBodyTalk( -1 );

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution

    def onInput_onSay( self, strTxt ):
        if( self.bIsRunning ):
            self.log( "Already running => nothing..." );
            return;
        nSayID = self.tts.post.say( "\\PAU=700\\ " + abcdk.speech.getTextWithCurrentSpeed( strTxt ) );
        self.startBodyTalk( nSayID );

# abcdk_BodyTalk - end
pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onPrepare" type="1" type_size="1" nature="1" inner="0" tooltip="If you know you will talk, you can prepare to have a starting more reactive." id="2" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the box behavior" id="3" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" /><Input name="onSay" type="3" type_size="1" nature="1" inner="0" tooltip="automatic say and animate imput: just send some text, and it will say them while talking, if the text is enough long..." id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /><Parameter name="bUseHead" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we send movements to the head ?" id="7" /><Parameter name="rElevation" inherits_from_parent="0" content_type="2" value="-0.25" default_value="0" min="-0.5" max="0.5" tooltip="" id="8" /><Parameter name="rSide" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="" id="9" /><Parameter name="bTrackFace" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Mario use face tracking to look at human" id="10" /><Parameter name="astrJointsToExclude" inherits_from_parent="0" content_type="3" value="[]" default_value='[&quot;RArm&quot;]' custom_choice="1" tooltip="a string to evaluate as an array: it&apos;s a list of obstacles" id="11"><Choice value="[]" /><Choice value='[&quot;RHand&quot;]' /><Choice value='[&quot;RArm&quot;]' /></Parameter><Parameter name="astrObstacles" inherits_from_parent="0" content_type="3" value="[]" default_value='[&quot;Table&quot;]' custom_choice="0" tooltip="a string to evaluate as an array: it&apos;s a list of obstacles" id="12"><Choice value="[]" /><Choice value='[&quot;Table&quot;]' /></Parameter><Parameter name="bWaitEndOfRestMovement" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="The box will wait for the rest movement to be finished. So when the stop is triggered, no movement is on the stack. (default)" id="13" /></Box><Box name="GetQuestion" id="5" localization="8" tooltip="" x="360" y="115"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.onStopped(theGame.getQuestion()) #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="TextId" inherits_from_parent="0" content_type="3" value="WELCOME" default_value="" custom_choice="0" tooltip="Text id of the localized string to retrieve" id="5" /></Box><Box name="goto_wait_answer" id="4" localization="8" tooltip="gotoXxx - explicit&#x0A;Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. The frame name is the one directly for the box name, so that it prevents copy-paste error and it&apos;s more explicit&#x0A;v0.6: first version" x="699" y="204"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[import datetime
import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        strJumpDestination = self.boxName;
        strJumpDestination = strJumpDestination.replace( "goto_", "" );
        strJumpDestination = strJumpDestination.replace( "goto", "" );
        strHumanTime = datetime.datetime.now().strftime( "%Y_%m_%d-%Hh%Mm%Ss%fms" );
        self.log("[%s] %s: goto frame '%s'" % ( strHumanTime, time.time(), strJumpDestination ) );
        self.gotoAndStopParent( strJumpDestination );

    def onInput_onStop(self):
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" /></Box><Link inputowner="13" indexofinput="5" outputowner="5" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="1" /><Link inputowner="4" indexofinput="2" outputowner="13" indexofoutput="6" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="wait_answer" index="34"><Diagram><Box name="FilterSameRecently" id="11" localization="8" tooltip="Filter data recently received&#x0A;&#x0A;v0.65: add a box parameter&#x0A;&#x0A;(this box was previously nammed FilterRecently)" x="105" y="135"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[# FilterSameRecently
# v0.65

import time
import mutex

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.mutex = mutex.mutex();
        self.dictRecentlySaid = dict(); # for each word, the hour of last pronociated

    def onLoad(self):
        if( self.getParameter("bResetAtEachLoad") ):
            self.dictRecentlySaid = dict(); # for each word, the hour of last pronociated


    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, oneThing ):
        while( self.mutex.testandset() == False ):
            print( "%s: locked, waiting" % self.getName() );
            time.sleep( 0.1 );

        if( not oneThing in self.dictRecentlySaid ):
            self.dictRecentlySaid[oneThing] = time.time() - 10000; # will be outputted now

        if( time.time() - self.dictRecentlySaid[oneThing] > self.getParameter( 'rTimeThreshold' ) ):
            self.dictRecentlySaid[oneThing] = time.time();
            self.onStopped(oneThing) #~ activate output of the box

        self.mutex.unlock();

    def onInput_onReset(self):
        while( self.mutex.testandset() == False ):
            print( "%s: locked, waiting" % self.getName() );

        self.dictRecentlySaid.clear();
        self.mutex.unlock();

# FilterSameRecently - end
pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="reset last so next data will pass even if it&apos;s the same than the previous one" id="3" /><Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="rTimeThreshold" inherits_from_parent="0" content_type="2" value="3" default_value="3" min="0" max="10000" tooltip="Threshold: time in seconds before new trigg is possible" id="5" /><Parameter name="bResetAtEachLoad" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="did you want this box to reset its timer at each new loading ? default: yes" id="6" /></Box><Box name="HandleAnswer" id="1" localization="8" tooltip="" x="325" y="129"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy("ALTextToSpeech")

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        # self.output_text(p + " ?")
        # time.sleep(4) # beurk
        self.tts.say( p + " ?" ) # say it quickly without moving

        s,bIsCorrect = theGame.receiveAnswer(p)
        self.log("receiveAnswer: returned: %s,%s"%(s,bIsCorrect))

        if bIsCorrect:
            self.output_text_good(s) #activate the output of the box
        else:
            self.output_text(s)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="output_text" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" /><Output name="output_text_good" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Box name="abcdk_BodyTalk" id="13" localization="8" tooltip="The abcdk_bodytalk: start fast and lightweight.&#x0A;&#x0A;v0.96: optionnal no wait at end&#x0A;v0.95: handle obstacles and exclude joint&#x0A;v0.94: patching on every error case&#x0A;v0.93: onSay: add the global speech speed&#x0A;v0.92: onSay: add a pause before speaking&#x0A;v0.91b: add comments&#x0A;v0.91: add direct txt inputing&#x0A;v0.9: change initialisation&#x0A;v0.8: add a track face&#x0A;v0.7: add an option to disable head movement (so you can launch what you want on it)" x="557" y="191"><bitmap>media/images/box/interaction/say.png</bitmap><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[# abcdk_BodyTalk
# v0.96

try: import abcdk.bodytalk
except: pass # this error could occurs only on first execution, it's handled in the installer
try: import abcdk.naoqitools
except: pass
try: import abcdk.speech
except: pass

if( 1 ):
    import abcdk.bodytalk
    reload(abcdk.bodytalk)
    import abcdk.motiontools
    reload(abcdk.motiontools)
    reload(abcdk.speech)
    import abcdk.tracking
    reload(abcdk.tracking)
    import abcdk.leds
    reload(abcdk.leds)

import time
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        try:
            self.tts = ALProxy( "ALTextToSpeech" );
        except Exception, err:
            self.log( "ERR: tts seems not to be present, so we won't use it..." );
            self.tts = False;

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onPrepare(self):
        abcdk.bodytalk.bodyTalk.prepare( bUseHead = self.getParameter( 'bUseHead' ), rSide = self.getParameter( "rSide" ), rElevation = self.getParameter( "rElevation" ),
                    astrJointsToExclude = eval(self.getParameter( "astrJointsToExclude" )),
                    astrObstacles = eval(self.getParameter( "astrObstacles" )),
        );

    def startBodyTalk( self, nSayID ):
        self.log( self.boxName + ": start - begin" );

        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;

        abcdk.bodytalk.bodyTalk.start( bUseHead = self.getParameter( 'bUseHead' ), bTrackFace = self.getParameter( 'bTrackFace' ),
                nSayID = nSayID, astrJointsToExclude = eval(self.getParameter( "astrJointsToExclude" )), astrObstacles = eval(self.getParameter( "astrObstacles" )),
        );
        rPeriod = 0.5;
        while( not self.bMustStop ):
            bRet = abcdk.bodytalk.bodyTalk.update( rSide = self.getParameter( "rSide" ), rElevation = self.getParameter( "rElevation" ) );
            if( not bRet ):
                self.bMustStop = True;
            time.sleep( rPeriod );
        # end while
        abcdk.bodytalk.bodyTalk.stop(self.getParameter("bWaitEndOfRestMovement"));
        self.bIsRunning = False;
        self.onStopped();
        self.log( self.boxName + ": start - end" );


    def onInput_onStart(self):
        self.startBodyTalk( -1 );

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution

    def onInput_onSay( self, strTxt ):
        if( self.bIsRunning ):
            self.log( "Already running => nothing..." );
            return;
        nSayID = self.tts.post.say( "\\PAU=700\\ " + abcdk.speech.getTextWithCurrentSpeed( strTxt ) );
        self.startBodyTalk( nSayID );

# abcdk_BodyTalk - end
pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onPrepare" type="1" type_size="1" nature="1" inner="0" tooltip="If you know you will talk, you can prepare to have a starting more reactive." id="2" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the box behavior" id="3" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" /><Input name="onSay" type="3" type_size="1" nature="1" inner="0" tooltip="automatic say and animate imput: just send some text, and it will say them while talking, if the text is enough long..." id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /><Parameter name="bUseHead" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we send movements to the head ?" id="7" /><Parameter name="rElevation" inherits_from_parent="0" content_type="2" value="-0.25" default_value="0" min="-0.5" max="0.5" tooltip="" id="8" /><Parameter name="rSide" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="" id="9" /><Parameter name="bTrackFace" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Mario use face tracking to look at human" id="10" /><Parameter name="astrJointsToExclude" inherits_from_parent="0" content_type="3" value="[]" default_value='[&quot;RArm&quot;]' custom_choice="1" tooltip="a string to evaluate as an array: it&apos;s a list of obstacles" id="11"><Choice value="[]" /><Choice value='[&quot;RHand&quot;]' /><Choice value='[&quot;RArm&quot;]' /></Parameter><Parameter name="astrObstacles" inherits_from_parent="0" content_type="3" value="[]" default_value='[&quot;Table&quot;]' custom_choice="0" tooltip="a string to evaluate as an array: it&apos;s a list of obstacles" id="12"><Choice value="[]" /><Choice value='[&quot;Table&quot;]' /></Parameter><Parameter name="bWaitEndOfRestMovement" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="The box will wait for the rest movement to be finished. So when the stop is triggered, no movement is on the stack. (default)" id="13" /></Box><Box name="Tactile Head" id="2" localization="8" tooltip="Detect touch on head tactile sensor." x="457" y="7"><bitmap>media/images/box/sensors/tactileHead.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" /><Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" /><Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" /><Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" /><Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" /><Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" /><Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" /><Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="Head-sequence" type="Lock" timeout="0" /></Box><Box name="goto_question" id="4" localization="8" tooltip="gotoXxx - explicit&#x0A;Jump to a given frame (edit parameters to modify it) and stop the timeline parent at this index. The frame name is the one directly for the box name, so that it prevents copy-paste error and it&apos;s more explicit&#x0A;v0.6: first version" x="1007" y="202"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[import datetime
import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        strJumpDestination = self.boxName;
        strJumpDestination = strJumpDestination.replace( "goto_", "" );
        strJumpDestination = strJumpDestination.replace( "goto", "" );
        strHumanTime = datetime.datetime.now().strftime( "%Y_%m_%d-%Hh%Mm%Ss%fms" );
        self.log("[%s] %s: goto frame '%s'" % ( strHumanTime, time.time(), strJumpDestination ) );
        self.gotoAndStopParent( strJumpDestination );

    def onInput_onStop(self):
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Parent timeline gotoAndStop when a signal is received on this input." id="2" /></Box><Box name="abcdk_BodyTalk (1)" id="3" localization="8" tooltip="The abcdk_bodytalk: start fast and lightweight.&#x0A;&#x0A;v0.96: optionnal no wait at end&#x0A;v0.95: handle obstacles and exclude joint&#x0A;v0.94: patching on every error case&#x0A;v0.93: onSay: add the global speech speed&#x0A;v0.92: onSay: add a pause before speaking&#x0A;v0.91b: add comments&#x0A;v0.91: add direct txt inputing&#x0A;v0.9: change initialisation&#x0A;v0.8: add a track face&#x0A;v0.7: add an option to disable head movement (so you can launch what you want on it)" x="595" y="343"><bitmap>media/images/box/interaction/say.png</bitmap><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[# abcdk_BodyTalk
# v0.96

try: import abcdk.bodytalk
except: pass # this error could occurs only on first execution, it's handled in the installer
try: import abcdk.naoqitools
except: pass
try: import abcdk.speech
except: pass

if( 1 ):
    import abcdk.bodytalk
    reload(abcdk.bodytalk)
    import abcdk.motiontools
    reload(abcdk.motiontools)
    reload(abcdk.speech)
    import abcdk.tracking
    reload(abcdk.tracking)
    import abcdk.leds
    reload(abcdk.leds)

import time
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        try:
            self.tts = ALProxy( "ALTextToSpeech" );
        except Exception, err:
            self.log( "ERR: tts seems not to be present, so we won't use it..." );
            self.tts = False;

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onPrepare(self):
        abcdk.bodytalk.bodyTalk.prepare( bUseHead = self.getParameter( 'bUseHead' ), rSide = self.getParameter( "rSide" ), rElevation = self.getParameter( "rElevation" ),
                    astrJointsToExclude = eval(self.getParameter( "astrJointsToExclude" )),
                    astrObstacles = eval(self.getParameter( "astrObstacles" )),
        );

    def startBodyTalk( self, nSayID ):
        self.log( self.boxName + ": start - begin" );

        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;

        abcdk.bodytalk.bodyTalk.start( bUseHead = self.getParameter( 'bUseHead' ), bTrackFace = self.getParameter( 'bTrackFace' ),
                nSayID = nSayID, astrJointsToExclude = eval(self.getParameter( "astrJointsToExclude" )), astrObstacles = eval(self.getParameter( "astrObstacles" )),
        );
        rPeriod = 0.5;
        while( not self.bMustStop ):
            bRet = abcdk.bodytalk.bodyTalk.update( rSide = self.getParameter( "rSide" ), rElevation = self.getParameter( "rElevation" ) );
            if( not bRet ):
                self.bMustStop = True;
            time.sleep( rPeriod );
        # end while
        abcdk.bodytalk.bodyTalk.stop(self.getParameter("bWaitEndOfRestMovement"));
        self.bIsRunning = False;
        self.onStopped();
        self.log( self.boxName + ": start - end" );


    def onInput_onStart(self):
        self.startBodyTalk( -1 );

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution

    def onInput_onSay( self, strTxt ):
        if( self.bIsRunning ):
            self.log( "Already running => nothing..." );
            return;
        nSayID = self.tts.post.say( "\\PAU=700\\ " + abcdk.speech.getTextWithCurrentSpeed( strTxt ) );
        self.startBodyTalk( nSayID );

# abcdk_BodyTalk - end
pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onPrepare" type="1" type_size="1" nature="1" inner="0" tooltip="If you know you will talk, you can prepare to have a starting more reactive." id="2" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the box behavior" id="3" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" /><Input name="onSay" type="3" type_size="1" nature="1" inner="0" tooltip="automatic say and animate imput: just send some text, and it will say them while talking, if the text is enough long..." id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /><Parameter name="bUseHead" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we send movements to the head ?" id="7" /><Parameter name="rElevation" inherits_from_parent="0" content_type="2" value="-0.25" default_value="0" min="-0.5" max="0.5" tooltip="" id="8" /><Parameter name="rSide" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="" id="9" /><Parameter name="bTrackFace" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Mario use face tracking to look at human" id="10" /><Parameter name="astrJointsToExclude" inherits_from_parent="0" content_type="3" value="[]" default_value='[&quot;RArm&quot;]' custom_choice="1" tooltip="a string to evaluate as an array: it&apos;s a list of obstacles" id="11"><Choice value="[]" /><Choice value='[&quot;RHand&quot;]' /><Choice value='[&quot;RArm&quot;]' /></Parameter><Parameter name="astrObstacles" inherits_from_parent="0" content_type="3" value="[]" default_value='[&quot;Table&quot;]' custom_choice="0" tooltip="a string to evaluate as an array: it&apos;s a list of obstacles" id="12"><Choice value="[]" /><Choice value='[&quot;Table&quot;]' /></Parameter><Parameter name="bWaitEndOfRestMovement" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="The box will wait for the rest movement to be finished. So when the stop is triggered, no movement is on the stack. (default)" id="13" /></Box><Box name="abcdk_BodyTalk (2)" id="5" localization="8" tooltip="The abcdk_bodytalk: start fast and lightweight.&#x0A;&#x0A;v0.96: optionnal no wait at end&#x0A;v0.95: handle obstacles and exclude joint&#x0A;v0.94: patching on every error case&#x0A;v0.93: onSay: add the global speech speed&#x0A;v0.92: onSay: add a pause before speaking&#x0A;v0.91b: add comments&#x0A;v0.91: add direct txt inputing&#x0A;v0.9: change initialisation&#x0A;v0.8: add a track face&#x0A;v0.7: add an option to disable head movement (so you can launch what you want on it)" x="820" y="61"><bitmap>media/images/box/interaction/say.png</bitmap><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[# abcdk_BodyTalk
# v0.96

try: import abcdk.bodytalk
except: pass # this error could occurs only on first execution, it's handled in the installer
try: import abcdk.naoqitools
except: pass
try: import abcdk.speech
except: pass

if( 1 ):
    import abcdk.bodytalk
    reload(abcdk.bodytalk)
    import abcdk.motiontools
    reload(abcdk.motiontools)
    reload(abcdk.speech)
    import abcdk.tracking
    reload(abcdk.tracking)
    import abcdk.leds
    reload(abcdk.leds)

import time
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);
        try:
            self.tts = ALProxy( "ALTextToSpeech" );
        except Exception, err:
            self.log( "ERR: tts seems not to be present, so we won't use it..." );
            self.tts = False;

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onPrepare(self):
        abcdk.bodytalk.bodyTalk.prepare( bUseHead = self.getParameter( 'bUseHead' ), rSide = self.getParameter( "rSide" ), rElevation = self.getParameter( "rElevation" ),
                    astrJointsToExclude = eval(self.getParameter( "astrJointsToExclude" )),
                    astrObstacles = eval(self.getParameter( "astrObstacles" )),
        );

    def startBodyTalk( self, nSayID ):
        self.log( self.boxName + ": start - begin" );

        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;

        abcdk.bodytalk.bodyTalk.start( bUseHead = self.getParameter( 'bUseHead' ), bTrackFace = self.getParameter( 'bTrackFace' ),
                nSayID = nSayID, astrJointsToExclude = eval(self.getParameter( "astrJointsToExclude" )), astrObstacles = eval(self.getParameter( "astrObstacles" )),
        );
        rPeriod = 0.5;
        while( not self.bMustStop ):
            bRet = abcdk.bodytalk.bodyTalk.update( rSide = self.getParameter( "rSide" ), rElevation = self.getParameter( "rElevation" ) );
            if( not bRet ):
                self.bMustStop = True;
            time.sleep( rPeriod );
        # end while
        abcdk.bodytalk.bodyTalk.stop(self.getParameter("bWaitEndOfRestMovement"));
        self.bIsRunning = False;
        self.onStopped();
        self.log( self.boxName + ": start - end" );


    def onInput_onStart(self):
        self.startBodyTalk( -1 );

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution

    def onInput_onSay( self, strTxt ):
        if( self.bIsRunning ):
            self.log( "Already running => nothing..." );
            return;
        nSayID = self.tts.post.say( "\\PAU=700\\ " + abcdk.speech.getTextWithCurrentSpeed( strTxt ) );
        self.startBodyTalk( nSayID );

# abcdk_BodyTalk - end
pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onPrepare" type="1" type_size="1" nature="1" inner="0" tooltip="If you know you will talk, you can prepare to have a starting more reactive." id="2" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the box behavior" id="3" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" /><Input name="onSay" type="3" type_size="1" nature="1" inner="0" tooltip="automatic say and animate imput: just send some text, and it will say them while talking, if the text is enough long..." id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /><Parameter name="bUseHead" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we send movements to the head ?" id="7" /><Parameter name="rElevation" inherits_from_parent="0" content_type="2" value="-0.25" default_value="0" min="-0.5" max="0.5" tooltip="" id="8" /><Parameter name="rSide" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="" id="9" /><Parameter name="bTrackFace" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Mario use face tracking to look at human" id="10" /><Parameter name="astrJointsToExclude" inherits_from_parent="0" content_type="3" value="[]" default_value='[&quot;RArm&quot;]' custom_choice="1" tooltip="a string to evaluate as an array: it&apos;s a list of obstacles" id="11"><Choice value="[]" /><Choice value='[&quot;RHand&quot;]' /><Choice value='[&quot;RArm&quot;]' /></Parameter><Parameter name="astrObstacles" inherits_from_parent="0" content_type="3" value="[]" default_value='[&quot;Table&quot;]' custom_choice="0" tooltip="a string to evaluate as an array: it&apos;s a list of obstacles" id="12"><Choice value="[]" /><Choice value='[&quot;Table&quot;]' /></Parameter><Parameter name="bWaitEndOfRestMovement" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="The box will wait for the rest movement to be finished. So when the stop is triggered, no movement is on the stack. (default)" id="13" /></Box><Box name="GetTextMultiLang" id="6" localization="8" tooltip="" x="662" y="29"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.onStopped(theGame.getTextMultiLang(self.getParameter("TextId"))) #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="TextId" inherits_from_parent="0" content_type="3" value="PASS" default_value="" custom_choice="0" tooltip="Text id of the localized string to retrieve" id="5" /></Box><Box name="Wait" id="7" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="497" y="530"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="45" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" /></Box><Box name="GetTextMultiLang (1)" id="8" localization="8" tooltip="" x="669" y="536"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.onStopped(theGame.getTextMultiLang(self.getParameter("TextId"))) #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="TextId" inherits_from_parent="0" content_type="3" value="TOO_LATE" default_value="" custom_choice="0" tooltip="Text id of the localized string to retrieve" id="5" /></Box><Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="11" indexofoutput="4" /><Link inputowner="13" indexofinput="5" outputowner="1" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" /><Link inputowner="3" indexofinput="5" outputowner="1" indexofoutput="5" /><Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="6" /><Link inputowner="5" indexofinput="5" outputowner="6" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="10" /><Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="6" /><Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="1" /><Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="4" /><Link inputowner="5" indexofinput="5" outputowner="8" indexofoutput="4" /><Link inputowner="7" indexofinput="3" outputowner="1" indexofoutput="5" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="results" index="53"><Diagram /></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="CardGameClass" id="5" localization="8" tooltip="" x="488" y="31"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[
tts = naoqi.ALProxy("ALTextToSpeech")
try:
    import abcdk.display
    reload(abcdk.display)
except BaseException as err:
    print("ERR: Loading error: %s" % err)

class CardGame:
    """
    Gere la logique du jeu et le multi langue
    """

    def __init__(self):
        self.nNumQuestion = 0
        self.listTextMulti = {
            "WELCOME": ("Welcome to the airbus quizz","Bienvenue dans le qouizz airbus."),
            "CORRECT": ("Correct, it's the %s!","Bravo, c'est bien le %s !"),
            "WRONG": ("Bad answer, try again!","Non ce n'est pas ça. Essaye encore"),
            "PASS": ("Anyway","Passons"),
            "LETS_START": ("Let's start:","C'est parti:"),
            "NEW_QUESTION": ("New question:","Nouvelle question:"),
            "TOO_LATE": ("too late!","Trop tard!"),
        }
        self.questions = [] # a list of name => skull of questions

    def reset(self,strBehaviorPath):
        self.strBehaviorPath = strBehaviorPath
        self.loadQuestions()

    def loadQuestions(self):
        print("INF: CardGame.loadQuestions: strBehaviorPath: %s" % self.strBehaviorPath )
        strFileName = "Airbus_airplane_questions - en.csv"
        if self.getLangIndex() == 1:
            strFileName = "Airbus_airplane_questions - fr.csv"
        lines = abcdk.filetools.loadCsv(self.strBehaviorPath + "/../" + strFileName,bSkipHeader=True)
        print("DBG: CardGame.loadQuestions: loaded = " + str(lines))
        for line in lines:
            if line[0] == "":
                continue
            while line[-1] in ['','\r']:
                line = line[:-1]
            self.questions.append(line)
        print("DBG: CardGame.loadQuestions: questions = " + str(self.questions))


    def getLangIndex(self):
        strCurrentLang = tts.getLanguage()
        idxLang = 0
        if strCurrentLang == "French":
            idxLang = 1
        return idxLang

    def getTextMultiLang(self,strTextID):
        idxLang = self.getLangIndex()
        return self.listTextMulti[strTextID][idxLang]

    def chooseQuestion(self):
        #self.strQuestion = "quel est l'avion le plus petit?"
        #self.strAnswer = "A320"
        idx = random.randint(0,len(self.questions)-1)
        #idx = 12 # force pour tester un helico
        print("INF: chooseQuestion: IDX: %d" % idx )
        q = self.questions[idx]
        self.strAnswer = q[0]
        if len(q)==1:
            print("WRN: chooseQuestion: no question for %s: %s" % (idx,q[0]))
            return self.chooseQuestion() # pick another one!
        idxq = random.randint(1,len(q)-1)

        num = abcdk.aruco_global_tools.findByName(self.strAnswer)
        strCateg = abcdk.aruco_global_tools.getArucoCategory(num)

        if self.getLangIndex() == 1:
            strAeronef = "l'avion"
            if "copter" in strCateg:
                strAeronef = "l'hélicoptère"
            strStartQuestion = "Quel est " + strAeronef
        else:
            strAeronef = "airplane"
            if "copter" in strCateg:
                strAeronef = "helicopter"
            strStartQuestion = "What is the " + strAeronef

        self.strQuestion = strStartQuestion + " " + q[idxq] + " ?"

        print("INF: chooseQuestion: QUESTION(%d,%d): %s" % (idx,idxq,self.strQuestion))
        print("INF: chooseQuestion: ANSWER: " + self.strAnswer)

        # ecris sur la tablette.
        #abcdk.display.writeMessageFullScreen(self.strQuestion)
        s = q[idxq]+" ?"
        s = s.replace("é","e").replace("ç","c").replace("à","a") # beurk !
        strStartQuestion = strStartQuestion.replace("é","e").replace("è","e")
        if len(s)>16:
            # cut second part of the line
            words = s.split(" ")
            mid = len(words)//2
            s = " ".join(words[:mid])+ "\n" + " ".join(words[mid:])
        background = self.strBehaviorPath + "/../tablet_screen_empty.png"
        abcdk.display.writeMessageFullScreen(strStartQuestion+"\n"+s,strBackgroundImage=background)


    def getQuestion( self ):
        o = ""
        if self.nNumQuestion == 0:
            o += self.getTextMultiLang("LETS_START")
        else:
            o += self.getTextMultiLang("NEW_QUESTION")
        o += " \\PAU=500\\ "
        self.chooseQuestion()
        o += self.strQuestion
        self.nNumQuestion += 1
        return o

    def receiveAnswer(self,a):
        """
        is a contains the correct answer?
        return sentence, and bIsCorrect
        """
        if a == self.strAnswer:
            return self.getTextMultiLang("CORRECT")%a,1
        return self.getTextMultiLang("WRONG"), 0

# class CardGame - end


theGame = CardGame()

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="213" y="32"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="2" outputowner="11" indexofoutput="4" /><Link inputowner="4" indexofinput="4" outputowner="1" indexofoutput="6" /><Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="4" /><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>