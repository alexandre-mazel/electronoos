<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="PositionatePepper" id="2" localization="8" tooltip="" x="249" y="353"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="BarcodeReader/BarcodeDetected" type="0" type_size="1" nature="4" stm_value_name="BarcodeReader/BarcodeDetected" inner="1" tooltip="BarcodeReader/BarcodeDetected desc" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="StarBarCodeReader" id="1" localization="8" tooltip="" x="251" y="50"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bcr = ALProxy("ALBarcodeReader")
        self.bcr.setResolution(2)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="AnalyseAndPositionate" id="2" localization="8" tooltip="" x="230" y="249"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion = ALProxy("ALMotion")
        self.ref_xc = 447 # 567 # 320
        self.ref_yc = 344 # not used
        self.ref_w = 40
        self.ref_rot = 0.95555555
        # ref was rect: [[360, 369], [362, 410], [401, 405], [397, 363]]

        self.xc = -1
        self.yc = -1
        self.w = -1
        self.rot = -1

    def onLoad(self):
        #put initialization code here
        self.motion.angleInterpolation("Head",[0,-0.385029078],1.0,1)

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        print("INF: AnalyseAndPositionate: receive: " + str(p))
        for qr in p:
            name,rect = qr
            if not "AirBus" in name:
                continue
            print("INF: AnalyseAndPositionate: rect: " + str(rect))
            xleft_avg = (rect[0][0]+rect[1][0])/2
            xright_avg = (rect[2][0]+rect[3][0])/2

            ytop_avg = (rect[0][1]+rect[3][1])/2
            ybottom_avg = (rect[1][1]+rect[2][1])/2
            hleft = rect[1][1]-rect[0][1]
            hright = rect[2][1]-rect[3][1]
            rot = hleft/float(hright)# estimation de la rotation

            w = xright_avg-xleft_avg
            h = ybottom_avg-ytop_avg
            xc = (xleft_avg+xright_avg)/2
            yc = (ytop_avg+ybottom_avg)/2

            print("INF: AnalyseAndPositionate: xc: %s, yc: %s, w: %s, h: %s, rot: %s (hleft:%s,hright:%s)" % (xc,yc,w,h,rot,hleft,hright))
            self.xc = xc
            self.yc = yc
            self.w = w
            self.rot = rot
            self.adjustPosition()

        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_onStorePosition(self, p):
        self.log("storing new ref")
        self.ref_xc = self.xc
        self.ref_yc = self.yc
        self.ref_w = self.w
        self.ref_rot = self.rot

    def adjustPosition(self):
        """
        move pepper to match reference
        """

        rDiffDist = 1.-(self.ref_w / float(self.w))
        rDiffX = 1.-(self.ref_xc / float(self.xc))
        rDiffRot = (self.ref_rot - self.rot)*1 # to be consistent with other magnitude
        print("DBG: adjustPosition: rDiffDist: %.2f, rDiffX: %.2f, rDiffRot: %.2f" % (rDiffDist,rDiffX,rDiffRot))
        #return
        #rDiffRot = 0
        if abs(rDiffDist)> 0.05 or abs(rDiffX) > 0.03 or abs(rDiffRot)>0.1:
            if abs(rDiffRot)>0.1:
                rDiffX = 0 # don't translate while rotation is not good
                rDiffDist = 0
            #rDiffX = 0 # to test only rot
            #rDiffDist = 0
            self.motion.moveTo(-rDiffDist*0.5,-rDiffX*0.04,-rDiffRot*0.1)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onStorePosition" type="1" type_size="1" nature="1" inner="0" tooltip="click me to store position" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>