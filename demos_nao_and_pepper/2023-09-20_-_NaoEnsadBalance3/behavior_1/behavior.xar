<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Input name="/chan1" type="0" type_size="1" nature="4" stm_value_name="/chan1" inner="1" tooltip="/chan1 desc" id="4" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="movelegs &amp; head code" id="8" localization="8" tooltip="" x="621" y="200">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.mot = ALProxy("ALMotion")

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
    # head pitch a -1.2deg et ankle pitch a 3deg, kneepitch a 6.3, shoulder pitcha 81.9
    # shoulder a 67 c'est encore miex.
        bHead = 0
        bHead = 1

        rHead = +0.1  # sens de respiration naturel
        # rHead = -0.1 # send pour se balancer

        rHead *= 2

        rTimePause = 0.5
        rTimePause = 1.
        rTimePause = 1.5-0.1-0.1
        rTimePause = 0.6 # 0.6
        rTimePause += 1.6 # 0.6

        rMoveHip = 0.05*1.5*3
        rMoveHip *=1.2
        rMoveHip *=0.9
        rMoveHip *=0.5
        rTimeHip = 2.5

        if bHead: self.mot.post.angleInterpolation(["HeadPitch"],[-rHead],rTimeHip,False)
        self.mot.angleInterpolation(["RHipPitch","LHipPitch"],[-rMoveHip,-rMoveHip],rTimeHip,False)
        time.sleep(rTimePause)
        if bHead: self.mot.post.angleInterpolation(["HeadPitch"],[+rHead],rTimeHip,False)
        self.mot.angleInterpolation(["RHipPitch","LHipPitch"],[+rMoveHip,+rMoveHip],rTimeHip,False)
        time.sleep(rTimePause)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="movelegs &amp; head code (1)" id="1" localization="8" tooltip="" x="921" y="292">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.mot = ALProxy("ALMotion")

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
    # head pitch a -1.2deg et ankle pitch a 3deg, kneepitch a 6.3, shoulder pitcha 81.9
    # shoulder a 67 c'est encore miex.
        bHead = 0
        bHead = 1

        rHead = +0.1  # sens de respiration naturel
        # rHead = -0.1 # send pour se balancer

        rHead *= 2
        rHead *= 2

        rTimePause = 0.5
        rTimePause = 1.
        rTimePause = 1.5-0.1-0.1
        rTimePause = 0.6 # 0.6

        rMoveHip = 0.05*1.5*3
        rMoveHip *=1.2
        rMoveHip *=0.9
        rMoveHip *=0.5
        rTimeHip = 2.5

        rMoveHip = 0

        if bHead: self.mot.post.angleInterpolation(["HeadPitch"],[-rHead],rTimeHip,False)
        self.mot.angleInterpolation(["RHipPitch","LHipPitch"],[-rMoveHip,-rMoveHip],rTimeHip,False)
        time.sleep(rTimePause)
        if bHead: self.mot.post.angleInterpolation(["HeadPitch"],[+rHead],rTimeHip,False)
        self.mot.angleInterpolation(["RHipPitch","LHipPitch"],[+rMoveHip,+rMoveHip],rTimeHip,False)
        time.sleep(rTimePause)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="moveknees" id="2" localization="8" tooltip="" x="766" y="1000">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.mot = ALProxy("ALMotion")

    def onLoad(self):
        #put initialization code here
        self.bIsFirst = 1

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
    # head pitch a -1.2deg et ankle pitch a 3deg, kneepitch a 6.3, shoulder pitcha 81.9
    # shoulder a 67 c'est encore miex.


        rTimePause = 1.


        astrJointKnees = ["RKneePitch","LKneePitch"]
        rMoveKnees = 0.2
        rMoveKnees *= 0.9
        rTimeKnees = 2.5

        astrJointHips = ["RHipPitch","LHipPitch"]
        rMoveHips = -0.2
        rTimeHips = 2.5

        astrJointHead = ["HeadPitch"]
        rMoveHead = -0.2
        rTimeHead = 4.

        astrJointFoot = ["LAnklePitch","RAnklePitch"]
        rMoveFoot = +0.2
        rTimeFoot = 2.


        self.mot.angleInterpolation(astrJointHead,[+rMoveHead],rTimeHead,False)
        self.mot.post.angleInterpolation(astrJointFoot,[+rMoveFoot,+rMoveFoot],rTimeFoot,False)
        time.sleep(rTimePause)
        self.mot.angleInterpolation(astrJointHead,[-rMoveHead],rTimeHead,False)
        self.mot.post.angleInterpolation(astrJointFoot,[-rMoveFoot,-rMoveFoot],rTimeFoot,False)
        time.sleep(rTimePause)



        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="Set Stiffness" id="5" localization="8" tooltip="Stiffen the motors selected in parameters." x="233" y="129">
                            <bitmap>media/images/box/movement/stiffness.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False
        self.motion = ALProxy("ALMotion")

    def onUnload(self):
        self.bIsRunning = False

    def setStiffness(self, stiffness):
        self.bIsRunning = True
        duration = self.getParameter("Duration (s)")
        if(self.getParameter("Head")):
            self.motion.post.stiffnessInterpolation("Head", stiffness, duration)
        if(self.getParameter("Left arm")):
            self.motion.post.stiffnessInterpolation("LArm", stiffness, duration)
        if(self.getParameter("Right arm")):
            self.motion.post.stiffnessInterpolation("RArm", stiffness, duration)
        if(self.getParameter("Left leg")):
            self.motion.post.stiffnessInterpolation("LLeg", stiffness, duration)
        if(self.getParameter("Right leg")):
            self.motion.post.stiffnessInterpolation("RLeg", stiffness, duration)
        time.sleep(duration)
        self.bIsRunning = False

    def onInput_onSet(self):
        if( self.bIsRunning ):
            return
        self.setStiffness(self.getParameter("Motors stiffness (%)")/100.)
        self.onReady() #~ activate output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="When this input is stimulated, the stiffness of the selected motors is set to&#x0A;the stiffness parameter value." id="2" />
                            <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when stiffness has been set." id="3" />
                            <Parameter name="Head" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the head stiffness?" id="4" />
                            <Parameter name="Left arm" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the left arm stiffness?" id="5" />
                            <Parameter name="Right arm" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the right arm stiffness?" id="6" />
                            <Parameter name="Left leg" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the left leg stiffness?" id="7" />
                            <Parameter name="Right leg" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the right leg stiffness?" id="8" />
                            <Parameter name="Motors stiffness (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Stiffness value the motors are set to." id="9" />
                            <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0.02" max="10" tooltip="How much time to go to the max/min stiffness in seconds." id="10" />
                        </Box>
                        <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="387" y="970">
                            <bitmap>media/images/box/wait.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                        </Box>
                        <Box name="move auto" id="7" localization="8" tooltip="" x="460" y="34">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say" id="6" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="676" y="257">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : " مرحبا ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Hello corentin, let\'s balance. v3 ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : " 你好 "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <arabic>
                                                                            <![CDATA[مرحبا]]>
</arabic>
                                                                        <czech>
                                                                            <![CDATA[Ahoj]]>
</czech>
                                                                        <danish>
                                                                            <![CDATA[Hej]]>
</danish>
                                                                        <german>
                                                                            <![CDATA[Hallo]]>
</german>
                                                                        <greek>
                                                                            <![CDATA[]]>
</greek>
                                                                        <english>
                                                                            <![CDATA[Hello corentin, let's balance. v3]]>
</english>
                                                                        <spanish>
                                                                            <![CDATA[Hola]]>
</spanish>
                                                                        <finnish>
                                                                            <![CDATA[Hei]]>
</finnish>
                                                                        <french>
                                                                            <![CDATA[Bonjour]]>
</french>
                                                                        <italian>
                                                                            <![CDATA[Ciao]]>
</italian>
                                                                        <japanese>
                                                                            <![CDATA[こんにちは]]>
</japanese>
                                                                        <korean>
                                                                            <![CDATA[안녕하세요]]>
</korean>
                                                                        <dutch>
                                                                            <![CDATA[Hallo]]>
</dutch>
                                                                        <norwegian>
                                                                            <![CDATA[]]>
</norwegian>
                                                                        <polish>
                                                                            <![CDATA[Cześć]]>
</polish>
                                                                        <brazilian>
                                                                            <![CDATA[Olá]]>
</brazilian>
                                                                        <portuguese>
                                                                            <![CDATA[Olá]]>
</portuguese>
                                                                        <russian>
                                                                            <![CDATA[Привет]]>
</russian>
                                                                        <swedish>
                                                                            <![CDATA[Hallå]]>
</swedish>
                                                                        <turkish>
                                                                            <![CDATA[Merhaba]]>
</turkish>
                                                                        <chinese>
                                                                            <![CDATA[你好]]>
</chinese>
                                                                        <language>5</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                                <Resource name="Speech" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Set Stiffness" id="5" localization="8" tooltip="Stiffen the motors selected in parameters." x="700" y="593">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False
        self.motion = ALProxy("ALMotion")

    def onUnload(self):
        self.bIsRunning = False

    def setStiffness(self, stiffness):
        self.bIsRunning = True
        duration = self.getParameter("Duration (s)")
        if(self.getParameter("Head")):
            self.motion.post.stiffnessInterpolation("Head", stiffness, duration)
        if(self.getParameter("Left arm")):
            self.motion.post.stiffnessInterpolation("LArm", stiffness, duration)
        if(self.getParameter("Right arm")):
            self.motion.post.stiffnessInterpolation("RArm", stiffness, duration)
        if(self.getParameter("Left leg")):
            self.motion.post.stiffnessInterpolation("LLeg", stiffness, duration)
        if(self.getParameter("Right leg")):
            self.motion.post.stiffnessInterpolation("RLeg", stiffness, duration)
        time.sleep(duration)
        self.bIsRunning = False

    def onInput_onSet(self):
        if( self.bIsRunning ):
            return
        self.setStiffness(self.getParameter("Motors stiffness (%)")/100.)
        self.onReady() #~ activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="When this input is stimulated, the stiffness of the selected motors is set to&#x0A;the stiffness parameter value." id="2" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when stiffness has been set." id="3" />
                                                <Parameter name="Head" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the head stiffness?" id="4" />
                                                <Parameter name="Left arm" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the left arm stiffness?" id="5" />
                                                <Parameter name="Right arm" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the right arm stiffness?" id="6" />
                                                <Parameter name="Left leg" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the left leg stiffness?" id="7" />
                                                <Parameter name="Right leg" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the right leg stiffness?" id="8" />
                                                <Parameter name="Motors stiffness (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Stiffness value the motors are set to." id="9" />
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0.02" max="10" tooltip="How much time to go to the max/min stiffness in seconds." id="10" />
                                            </Box>
                                            <Box name="move fake 1" id="9" localization="8" tooltip="" x="893" y="1229">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.mot = ALProxy("ALMotion")

    def onLoad(self):
        #put initialization code here
        self.bIsFirst = 1

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        # on commence sur la descente du torse: l'inspiration


        rTimeMove = 4.
        rTimePause = 1.


        astrJointKnees = ["RKneePitch","LKneePitch"]
        rMoveKnees = 0.2
        rMoveKnees *= 0.9
        rTimeKnees = 2.5

        rCoefReducteurArms = 0.5
        astrJointShoulderRoll = ["RShoulderRoll","LShoulderRoll"]
        rMoveShoulderRoll = -0.1
        rMoveShoulderRoll *= rCoefReducteurArms
        rTimeShoulderRoll = 3.5

        astrJointShoulderPitch = ["RShoulderPitch","LShoulderPitch"]
        rMoveShoulderPitch = +0.3
        rMoveShoulderPitch *= rCoefReducteurArms
        rTimeShoulderPitch = 3.5

        astrJointElbowR = ["RElbowRoll","LElbowRoll"]
        rMoveElbowR = +0.2
        rMoveShoulderPitch *= rCoefReducteurArms
        rTimeElbowR = 3.5

        astrJointHips = ["RHipPitch","LHipPitch"]
        rMoveHips = +0.
        rTimeHips = 2.5

        astrJointHead = ["HeadPitch"]
        rMoveHead = -0.3
        rTimeHead = 3.5

        astrJointFeet = ["LAnklePitch","RAnklePitch"]
        rMoveFeet = +0.2
        rTimeFeet = 3.5




        self.mot.post.angleInterpolation(astrJointHips,[+rMoveHips,+rMoveHips],rTimeHips,False)
        self.mot.post.angleInterpolation(astrJointFeet,[+rMoveFeet,+rMoveFeet],rTimeFeet,False)
        self.mot.post.angleInterpolation(astrJointShoulderRoll,[-rMoveShoulderRoll,+rMoveShoulderRoll],rTimeShoulderRoll,False)
        self.mot.post.angleInterpolation(astrJointShoulderPitch,[-rMoveShoulderPitch,-rMoveShoulderPitch],rTimeShoulderPitch,False)
        self.mot.post.angleInterpolation(astrJointElbowR,[-rMoveElbowR,+rMoveElbowR],rTimeElbowR,False)
        self.mot.post.angleInterpolation(astrJointHead,[+rMoveHead],rTimeHead,False)

        time.sleep(rTimeMove)
        time.sleep(rTimePause)

        self.mot.post.angleInterpolation(astrJointHips,[-rMoveHips,-rMoveHips],rTimeHips,False)
        self.mot.post.angleInterpolation(astrJointFeet,[-rMoveFeet,-rMoveFeet],rTimeFeet,False)
        self.mot.post.angleInterpolation(astrJointShoulderRoll,[+rMoveShoulderRoll,-rMoveShoulderRoll],rTimeShoulderRoll,False)
        self.mot.post.angleInterpolation(astrJointShoulderPitch,[+rMoveShoulderPitch,+rMoveShoulderPitch],rTimeShoulderPitch,False)
        self.mot.post.angleInterpolation(astrJointElbowR,[+rMoveElbowR,-rMoveElbowR],rTimeElbowR,False)
        self.mot.post.angleInterpolation(astrJointHead,[-rMoveHead],rTimeHead,False)
        time.sleep(rTimeMove)
        time.sleep(rTimePause)



        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="store pos" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="678" y="1225">
                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline enable="1" fps="25" start_frame="1" end_frame="45" size="45">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram />
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList model="">
                                                        <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                                            <Key frame="25" value="1.84332" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                                            <Key frame="25" value="2.72224" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                                            <Key frame="25" value="21.7948" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                                            <Key frame="25" value="-4.2164" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                                            <Key frame="25" value="-43.6798" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                                            <Key frame="25" value="-69.0853" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                                            <Key frame="25" value="0.8988" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                                            <Key frame="25" value="-51.6779" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                                            <Key frame="25" value="19.2507" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                                            <Key frame="25" value="-10.1051" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                                            <Key frame="25" value="34.2754" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                                            <Key frame="25" value="88.2409" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                                            <Key frame="25" value="28.7382" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                                            <Key frame="25" value="-30.4129" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                                            <Key frame="25" value="28.3035" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                                            <Key frame="25" value="-3.33748" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                                            <Key frame="25" value="50.2765" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                                            <Key frame="25" value="64.8617" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                                            <Key frame="25" value="0.9728" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                                            <Key frame="25" value="-48.0792" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                                            <Key frame="25" value="-5.97423" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                                            <Key frame="25" value="-10.1051" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                                            <Key frame="25" value="31.204" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                                            <Key frame="25" value="93.695" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                                            <Key frame="25" value="-22.239" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                                            <Key frame="25" value="23.7284" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="AutoArmsBreath - mod only hands" id="10" localization="8" tooltip="Auto random arms moves (multi robot)&#x0A;v0.3" x="1020" y="368">
                                                <bitmap>media/images/box/loop.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# RomeoArmsBreath
# v0.3
# todo: essayer de tirer un pitch et un yaw puis appliquer au prorata de la distance de l'epaule
import random
import time
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;
        self.motion = ALProxy( "ALMotion" );
        self.id = -1;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );

        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;

        rPeriod = self.getParameter( 'rPeriod' );
        listJointsRef = self.motion.getJointNames( "Arms" );
        listJointsRef = ["LHand","RHand"]
        listJointsPosRef = self.motion.getAngles( listJointsRef, True ); # store this position as a ref
        print( "listJointsRef: %s" % listJointsRef );
        print( "listJointsPosRef: %s" % listJointsRef );
        self.id = -1;
        while( not self.bMustStop ):
            if( random.random() > 0 ):
                # select some joints, and apply a small moves from the ref position
                listJoints = [];
                listJointsPos = [];
                for idx, joint in enumerate(listJointsRef):
                    if( random.random() > 0.5 ):
                        listJoints.append( joint );
                        if( "Hand" in joint ):
                            if( random.random() > 0.5 ):
                                rVal = 0.01;
                            else:
                                rVal = 0.95;
                        else:
                            rOffset = (random.random()-0.5)*0.2;
                            if( "WristRoll" in joint ):
                                rOffset *= 5.;
                            elif( "Wrist" in joint ):
                                rOffset *= 3.;
                            elif( "Elbow" in joint ):
                                rOffset *= 1.5;
                            rVal = listJointsPosRef[idx] + rOffset;
                        listJointsPos.append( rVal );
                if( len(listJoints) > 0 ):
                    print( "listJoints: %s" % listJoints );
                    print( "listJointsPos: %s" % listJointsPos );
                    nLoop = random.randint(1,3);
                    for i in range(nLoop):
                        self.id = self.motion.post.angleInterpolationWithSpeed( listJoints, listJointsPos, 0.02+random.random()/20 );
                        self.motion.wait( self.id, 0 );
                        if( self.bMustStop ):
                            break;
                        time.sleep( random.random() );
                        if( self.bMustStop ):
                            break;

                        self.id = self.motion.post.angleInterpolationWithSpeed( listJointsRef, listJointsPosRef, 0.02+random.random()/20 );
                        self.motion.wait( self.id, 0 );
                        time.sleep( random.random() + 1. );
                        if( self.bMustStop ):
                            break;
                    if( self.bMustStop ):
                        break;
                    self.id = self.motion.post.angleInterpolationWithSpeed( listJoints, listJointsPos, 0.02+random.random()/20 );
                    self.motion.wait( self.id, 0 );

            else:
                # place all joint to the ref pos but some to other pose
                listJoints = listJointsRef[:];
                listJointsPos = listJointsPosRef[:];
                for idx, joint in enumerate(listJointsRef):
                    if( random.random() > 0.8 ):
                        listJointsPos[idx] += (random.random()-0.5)*0.2;
                if( len(listJoints) > 0 ):
                    print( "listJoints: %s" % listJoints );
                    print( "listJointsPos: %s" % listJointsPos );
                    self.id = self.motion.post.angleInterpolationWithSpeed( listJoints, listJointsPos, 0.1 );
                    self.motion.wait( self.id, 0 );
            if( self.bMustStop ):
                break;
            time.sleep( rPeriod * random.random() + 1. );
        # end while
        if( self.id != -1 ):
            try:
                self.motion.stop( self.id );
            except BaseException, err:
                print( "err in stop: %s" % err );
        self.bIsRunning = False;
        self.onStopped();
        self.log( self.boxName + ": start - end" );

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution
        if( self.id != -1 ):
            try:
                self.motion.stop( self.id );
            except BaseException, err:
                print( "err in stop: %s" % err );

# Template_White - end
pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="100000" tooltip="period in seconds" id="5" />
                                            </Box>
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="9" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="9" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="3" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Tactile Head" id="6" localization="8" tooltip="Detect touch on head tactile sensor." x="165" y="24">
                            <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                            <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                            <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                            <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                            <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                            <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                            <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Head-sequence" type="Lock" timeout="0" />
                        </Box>
                        <Box name="move fake 1" id="9" localization="8" tooltip="" x="426" y="765">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.mot = ALProxy("ALMotion")

    def onLoad(self):
        #put initialization code here
        self.bIsFirst = 1

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        # on commence sur la descente du torse: l'inspiration
        print("%.3f: Move start" % time.time())


        rTimeMove = 4.
        rTimePause = 1.


        astrJointKnees = ["RKneePitch","LKneePitch"]
        rMoveKnees = 0.2
        rMoveKnees *= 0.9
        rTimeKnees = 2.5

        rCoefReducteurArms = 0.5
        astrJointShoulderRoll = ["RShoulderRoll","LShoulderRoll"]
        rMoveShoulderRoll = -0.1
        rMoveShoulderRoll *= rCoefReducteurArms
        rTimeShoulderRoll = 3.5

        astrJointShoulderPitch = ["RShoulderPitch","LShoulderPitch"]
        rMoveShoulderPitch = +0.3
        rMoveShoulderPitch *= rCoefReducteurArms
        rTimeShoulderPitch = 3.5

        astrJointElbowR = ["RElbowRoll","LElbowRoll"]
        rMoveElbowR = +0.2
        rMoveShoulderPitch *= rCoefReducteurArms
        rTimeElbowR = 3.5

        astrJointHips = ["RHipPitch","LHipPitch"]
        rMoveHips = +0.
        rTimeHips = 2.5

        astrJointHead = ["HeadPitch"]
        rMoveHead = -0.3
        rTimeHead = 3.5

        astrJointFeet = ["LAnklePitch","RAnklePitch"]
        rMoveFeet = -0.2
        rTimeFeet = 3.5




        self.mot.post.angleInterpolation(astrJointHips,[+rMoveHips,+rMoveHips],rTimeHips,False)
        self.mot.post.angleInterpolation(astrJointFeet,[+rMoveFeet,+rMoveFeet],rTimeFeet,False)
        self.mot.post.angleInterpolation(astrJointShoulderRoll,[-rMoveShoulderRoll,+rMoveShoulderRoll],rTimeShoulderRoll,False)
        self.mot.post.angleInterpolation(astrJointShoulderPitch,[-rMoveShoulderPitch,-rMoveShoulderPitch],rTimeShoulderPitch,False)
        self.mot.post.angleInterpolation(astrJointElbowR,[-rMoveElbowR,+rMoveElbowR],rTimeElbowR,False)
        self.mot.post.angleInterpolation(astrJointHead,[+rMoveHead],rTimeHead,False)

        time.sleep(rTimeMove)
        time.sleep(rTimePause)

        self.mot.post.angleInterpolation(astrJointHips,[-rMoveHips,-rMoveHips],rTimeHips,False)
        self.mot.post.angleInterpolation(astrJointFeet,[-rMoveFeet,-rMoveFeet],rTimeFeet,False)
        self.mot.post.angleInterpolation(astrJointShoulderRoll,[+rMoveShoulderRoll,-rMoveShoulderRoll],rTimeShoulderRoll,False)
        self.mot.post.angleInterpolation(astrJointShoulderPitch,[+rMoveShoulderPitch,+rMoveShoulderPitch],rTimeShoulderPitch,False)
        self.mot.post.angleInterpolation(astrJointElbowR,[+rMoveElbowR,-rMoveElbowR],rTimeElbowR,False)
        self.mot.post.angleInterpolation(astrJointHead,[-rMoveHead],rTimeHead,False)
        time.sleep(rTimeMove)
        print("%.3f: Move presque " % time.time())
        time.sleep(rTimePause)

        print("%.3f: Move end" % time.time())

        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="store pos" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="211" y="761">
                            <bitmap>media/images/box/movement/move.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="45" size="45">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList model="">
                                    <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="25" value="1.84332" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="25" value="2.72224" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="25" value="21.7948" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="25" value="-4.2164" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="25" value="-43.6798" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="25" value="-69.0853" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="25" value="0.8988" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="25" value="-51.6779" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="25" value="19.2507" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="25" value="-10.1051" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="25" value="34.2754" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="25" value="88.2409" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="25" value="28.7382" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="25" value="-30.4129" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="25" value="28.3035" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="25" value="-3.33748" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="25" value="50.2765" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="25" value="64.8617" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="25" value="0.9728" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="25" value="-48.0792" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="25" value="-5.97423" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="25" value="-10.1051" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="25" value="31.204" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="25" value="93.695" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="25" value="-22.239" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="25" value="23.7284" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="Comment" id="4" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="574" y="426">
                            <bitmap>media/images/box/box-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("20 sept 2023:\nc\'est celle la la bonne avec la position mise ci dessous \"move fake 1\"")]]>
</content>
                            </script>
                            <pluginContent>
                                <text>
                                    <![CDATA[20 sept 2023:
c'est celle la la bonne avec la position mise ci dessous "move fake 1"]]>
</text>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        </Box>
                        <Box name="AutoArmsBreath - mod only hands" id="10" localization="8" tooltip="Auto random arms moves (multi robot)&#x0A;v0.3" x="809" y="800">
                            <bitmap>media/images/box/loop.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# RomeoArmsBreath
# v0.3
# todo: essayer de tirer un pitch et un yaw puis appliquer au prorata de la distance de l'epaule
import random
import time
class MyClass(GeneratedClass):
    """ insert here your comments about this class """
    def __init__(self):
        GeneratedClass.__init__(self);

    def onLoad(self):
        self.bMustStop = False;
        self.bIsRunning = False;
        self.motion = ALProxy( "ALMotion" );
        self.id = -1;

    def onUnload(self):
        self.onInput_onStop(); # stop current loop execution

    def onInput_onStart(self):
        self.log( self.boxName + ": start - begin" );

        if( self.bIsRunning ):
            self.log( self.boxName + ": already started => nothing" );
            return;

        self.bIsRunning = True;
        self.bMustStop = False;

        rPeriod = self.getParameter( 'rPeriod' );
        listJointsRef = self.motion.getJointNames( "Arms" );
        listJointsRef = ["LHand","RHand"]
        listJointsPosRef = self.motion.getAngles( listJointsRef, True ); # store this position as a ref
        print( "listJointsRef: %s" % listJointsRef );
        print( "listJointsPosRef: %s" % listJointsRef );
        self.id = -1;
        while( not self.bMustStop ):
            if( random.random() > 0 ):
                # select some joints, and apply a small moves from the ref position
                listJoints = [];
                listJointsPos = [];
                for idx, joint in enumerate(listJointsRef):
                    if( random.random() > 0.5 ):
                        listJoints.append( joint );
                        if( "Hand" in joint ):
                            if( random.random() > 0.5 ):
                                rVal = 0.01;
                            else:
                                rVal = 0.95;
                        else:
                            rOffset = (random.random()-0.5)*0.2;
                            if( "WristRoll" in joint ):
                                rOffset *= 5.;
                            elif( "Wrist" in joint ):
                                rOffset *= 3.;
                            elif( "Elbow" in joint ):
                                rOffset *= 1.5;
                            rVal = listJointsPosRef[idx] + rOffset;
                        listJointsPos.append( rVal );
                if( len(listJoints) > 0 ):
                    print( "listJoints: %s" % listJoints );
                    print( "listJointsPos: %s" % listJointsPos );
                    nLoop = random.randint(1,3);
                    for i in range(nLoop):
                        self.id = self.motion.post.angleInterpolationWithSpeed( listJoints, listJointsPos, 0.02+random.random()/20 );
                        self.motion.wait( self.id, 0 );
                        if( self.bMustStop ):
                            break;
                        time.sleep( random.random() );
                        if( self.bMustStop ):
                            break;

                        self.id = self.motion.post.angleInterpolationWithSpeed( listJointsRef, listJointsPosRef, 0.02+random.random()/20 );
                        self.motion.wait( self.id, 0 );
                        time.sleep( random.random() + 1. );
                        if( self.bMustStop ):
                            break;
                    if( self.bMustStop ):
                        break;
                    self.id = self.motion.post.angleInterpolationWithSpeed( listJoints, listJointsPos, 0.02+random.random()/20 );
                    self.motion.wait( self.id, 0 );

            else:
                # place all joint to the ref pos but some to other pose
                listJoints = listJointsRef[:];
                listJointsPos = listJointsPosRef[:];
                for idx, joint in enumerate(listJointsRef):
                    if( random.random() > 0.8 ):
                        listJointsPos[idx] += (random.random()-0.5)*0.2;
                if( len(listJoints) > 0 ):
                    print( "listJoints: %s" % listJoints );
                    print( "listJointsPos: %s" % listJointsPos );
                    self.id = self.motion.post.angleInterpolationWithSpeed( listJoints, listJointsPos, 0.1 );
                    self.motion.wait( self.id, 0 );
            if( self.bMustStop ):
                break;
            time.sleep( rPeriod * random.random() + 1. );
        # end while
        if( self.id != -1 ):
            try:
                self.motion.stop( self.id );
            except BaseException, err:
                print( "err in stop: %s" % err );
        self.bIsRunning = False;
        self.onStopped();
        self.log( self.boxName + ": start - end" );

    def onInput_onStop(self):
        self.bMustStop = True; # stop current loop execution
        if( self.id != -1 ):
            try:
                self.motion.stop( self.id );
            except BaseException, err:
                print( "err in stop: %s" % err );

# Template_White - end
pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Parameter name="rPeriod" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="100000" tooltip="period in seconds" id="5" />
                        </Box>
                        <Box name="add_offset_time" id="12" localization="8" tooltip="" x="325" y="529">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        # permit to add a time delay
        time.sleep(2.)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="get_sync_activable" id="13" localization="8" tooltip="" x="111" y="437">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="/chan1" type="0" type_size="1" nature="4" stm_value_name="/chan1" inner="1" tooltip="/chan1 desc" id="4" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                            <Output name="trig" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="get_sync" id="11" localization="8" tooltip="" x="336" y="329">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        if p>0.5:
            self.trig()
            self.leds.fadeRGB("FaceLeds", 0x0000FF, 0.1)
            time.sleep(0.1)
            self.leds.post.fadeRGB("FaceLeds", 0xFFFFFF, 0.5)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="trig" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="6" outputowner="11" indexofoutput="5" />
                                            <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Link inputowner="8" indexofinput="2" outputowner="8" indexofoutput="4" />
                        <Link inputowner="1" indexofinput="2" outputowner="1" indexofoutput="4" />
                        <Link inputowner="2" indexofinput="2" outputowner="2" indexofoutput="4" />
                        <Link inputowner="2" indexofinput="2" outputowner="14" indexofoutput="4" />
                        <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="8" />
                        <Link inputowner="7" indexofinput="3" outputowner="6" indexofoutput="10" />
                        <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="3" />
                        <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="9" indexofinput="2" outputowner="12" indexofoutput="4" />
                        <Link inputowner="12" indexofinput="2" outputowner="13" indexofoutput="6" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
