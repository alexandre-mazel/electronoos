import cv2

def generateImg( aListImg, w=14, h=8 ):
    """
    Will generate a matric of BGR images
    """
    bRender = 0;

    strOut = "// generated by generate_img.py using %s\n" % str(aListImg);
    strOut += "unsigned char aImgs[] = {\n";

    for nNumImage, strFilename in enumerate(aListImg):
        print( "INF: opening %s" % strFilename );
        img = cv2.imread( strFilename );
        img = cv2.resize(img, (w, h)) 
        
        if( bRender ):
            cv2.imshow( "imdraw", img );
            cv2.waitKey(0);
            
        for j in range(h):
            strOut += "// img: %d, %s, line %d\n" % (nNumImage,strFilename, j);
            for i in range(w):
                val = img[j,i]
                strOut += "0x%02X, 0x%02X, 0x%02X,  \n" % (val[0], val[1], val[2]);
            strOut += "\n";
            
    strOut += "};\n";
    strOut += "// data outputted = %dB\n" % (w*h*3);        
        
    
    file = open("/tmp/imgs.c", "wt" );
    file.write( strOut );
    file.close();
    
    file = open("/tmp/imgs.h", "wt" );
    
    strOut = "";
    strOut += "#ifndef IMGS_H\n"
    strOut += "#define IMGS_H\n";
    strOut += "extern unsigned char aImgs[]; // putting unsigned char * generate an error: aLetters is set to 0\n";
    strOut += "#define IMG_SIZE_X %d\n" % w;
    strOut += "#define IMG_SIZE_Y %d\n" % h;
    strOut += "#define IMG_NBR    %d\n" % (nNumImage+1);
    strOut += "#endif // IMGS_H\n";
    file.write( strOut );
    file.close();

    
# generateFontRom - end
    
    
#~ strImage = "../data/house_face.jpg";
#~ strImage = "../data/girl_face.jpg";
#~ strImage = "../data/Pacman_HD.png";

#~ aListImg = ["../data/house_face.jpg", "../data/girl_face.jpg", "../data/Pacman_HD.png"];

aLogo = ["logo_atari.png", "logo_intel.png", "logo_raspberry.jpg", "logo_batman.png", "logo_nike.jpg", 
"logo_shell.jpg","logo_chrome.png", "logo_olympic.png", "logo_superman.png", "logo_ikea.jpg", "logo_puma.jpg", "logo_target.jpg"
];

aListImg = ["../data/"+i for i in aLogo];

    
generateImg(aListImg);

